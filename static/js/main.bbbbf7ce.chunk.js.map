{"version":3,"sources":["logo_temp_1.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","template","internalHTML","className","App","props","inputNameOnChangeHandler","evt","preventDefault","setState","inputNameValue","target","value","quizClickChangeHandler","quizToGo","name","fetch","baseAddress","Date","getTime","method","credentials","then","res","json","data","redirectTo","res2","data2","currentQuestion","questions","notice","maxCount","currentQuiz","current","answerButtonClickHandler","console","log","state","index","dataset","correct","seeScores","scores","backButtonClickHandler","newTarget","quizOptions","this","reg","undefined","src","logo_temp","type","id","placeholder","onChange","onClick","login","bind","map","key","internalValueToDisplay","question","answer","style","data-correct","height","t1","t2","t3","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbbbf7ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_temp_1.c22650c3.png\";","import React from 'react';\nimport logo_temp from './logo_temp_1.png'\nimport './App.css';\n\n/**\n * States : \n * login  -> quiz selection\n *        -> scores\n * quiz selection -> quiz\n * quiz\n * scores\n */\n\nfunction template(internalHTML) {\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\">\n        <center>\n          <div className=\"loginScreen borderStandard\" >\n            {internalHTML}\n          </div>\n        </center>\n      </header>\n    </div >\n  )\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.baseAddress = `https://qui-zup.herokuapp.com`//`http://127.0.0.1:3000`\n\n    this.state = {\n      // current: \"login\",\n      quizOptions: null,\n      inputNameValue: null,\n      currentQuiz: null,\n      currentQuestion: null,\n      notice: null,\n      scores: null\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"component mounting\")\n    fetch(`${this.baseAddress}/isUserRegistered`, {\n      method: \"GET\",\n      credentials: \"include\"\n    })\n      .then((res) => {\n        res.json()\n          .then((data) => {\n            debugger;\n            console.log(data)\n            if (data.reg) {\n              fetch(`${this.baseAddress}/listOfQuizzes`, {\n                credentials: \"include\"\n              })\n                .then((res2) => {\n                  res2.json()\n                    .then((data2) => {\n                      this.setState({\n                        current: \"quiz selection\",\n                        quizOptions: data2\n                      })\n                    })\n                })\n            } else {\n              this.setState({\n                current: \"login\"\n              })\n            }\n          })\n      })\n  }\n\n  login() {\n    if (this.state.inputNameValue !== null && this.state.inputNameValue !== undefined) {\n      debugger;\n      fetch(`${this.baseAddress}/registerUser/${this.state.inputNameValue}`, {\n        method: \"POST\",\n        credentials: \"include\"\n      })\n        .then((res) => {\n          debugger;\n          console.log(res)\n          fetch(`${this.baseAddress}/listOfQuizzes`, {\n            credentials: \"include\"\n          })\n            .then((res) => {\n              res.json()\n                .then((data) => {\n                  this.setState({\n                    current: \"quiz selection\",\n                    quizOptions: data\n                  })\n                })\n            })\n        })\n    }\n  }\n\n  inputNameOnChangeHandler = (evt) => {\n    evt.preventDefault();\n    this.setState({\n      inputNameValue: evt.target.value\n    })\n  }\n\n  quizClickChangeHandler = (evt) => {\n    evt.preventDefault();\n    let quizToGo = evt.target.name\n    fetch(`${this.baseAddress}/startTimer/${(new Date()).getTime()}/${quizToGo}/`, {\n      method: \"POST\",\n      credentials: \"include\"\n    })\n      .then((res) => {\n        res.json()\n          .then((data) => {\n            fetch(`${this.baseAddress}/getQuestion/${quizToGo}/${data.redirectTo}`, {\n              credentials: \"include\"\n            })\n              .then((res2) => {\n                res2.json()\n                  .then((data2) => {\n                    this.setState({\n                      currentQuestion: data2.questions,\n                      notice: data2.notice,\n                      maxCount: data2.maxCount,\n                      currentQuiz: quizToGo,\n                      current: \"quiz\"\n                    })\n                  })\n              })\n\n          })\n      })\n  }\n\n  answerButtonClickHandler = (evt) => {\n    console.log(evt.target)\n    fetch(`${this.baseAddress}/getQuestion/${this.state.currentQuiz}/${this.state.currentQuestion.index}/${evt.target.dataset.correct}`, {\n      credentials: \"include\"\n    })\n      .then((res) => {\n        res.json()\n          .then((data) => {\n            this.setState({\n              currentQuestion: data.questions,\n              notice: data.notice,\n              maxCount: data.maxCount,\n            })\n          })\n      })\n    if (this.state.currentQuestion.index === this.state.maxCount) {\n      fetch(`${this.baseAddress}/endTimer/${(new Date()).getTime()}/${this.state.currentQuiz}`, {\n        method: \"POST\",\n        credentials: \"include\"\n      })\n    }\n  }\n\n\n  seeScores = (evt) => {\n    debugger;\n    evt.preventDefault()\n    fetch(`${this.baseAddress}/scores`, {\n      credentials: \"include\"\n    })\n      .then((res) => {\n        res.json()\n          .then((data) => {\n            this.setState({\n              current: \"scores\",\n              scores: data\n            })\n          })\n      })\n  }\n\n  backButtonClickHandler = (evt, newTarget) => {\n    evt.preventDefault()\n    this.setState({\n      current: \"quiz selection\"\n    })\n  }\n\n  render() {\n\n    if (this.state.current === 'login') {\n      return (\n        template(\n          <div>\n            <img className=\"logoImg\" src={logo_temp} ></img>\n            <div className=\"userName\">\n              <input\n                type=\"text\"\n                id=\"inputName\"\n                placeholder=\"Enter Your Name Here\"\n                className=\"borderStandard\"\n                onChange={this.inputNameOnChangeHandler}>\n              </input>\n            </div>\n            <div className=\"loginButtons\">\n              <button className=\"borderStandard\" onClick={this.login.bind(this)}>start quiz</button>\n              <button className=\"borderStandard\" onClick={this.seeScores.bind(this)}>see scores</button>\n            </div>\n          </div>\n        )\n      )\n    } else if (this.state.current === \"quiz selection\") {\n      return (\n        template(\n          <div>\n            <span className=\"headerText\">Select a Quiz :</span>\n            <div className=\"loginButtons\">\n              {this.state.quizOptions.map((data) => {\n                return <button onClick={this.quizClickChangeHandler} name={data.key} className=\"borderStandard\" key={data.key}>{data.name}</button>\n              })}\n            </div>\n          </div >\n        )\n      )\n    } else if (this.state.current === 'quiz') {\n      let internalValueToDisplay = <div>\n        <span className=\"headerText\">{this.state.currentQuestion.question}</span>\n        <br></br>\n        <span className=\"notice\">{this.state.notice}</span>\n        <div className=\"loginButtons\">\n          {this.state.currentQuestion.answer.map((data, index) => {\n            return <button style={{ \"paddingBottom\": \"30px\", \"marginBottom\": \"30px\" }} onClick={this.answerButtonClickHandler.bind(this)} name={index} data-correct={index === this.state.currentQuestion.correct} className=\"borderStandard\" key={data}>{data}</button>\n          })}\n        </div>\n      </div >\n\n      if (this.state.currentQuestion.index > this.state.maxCount) {\n        debugger;\n        internalValueToDisplay = <div>\n          <span className=\"headerText\">Quiz Done! Go back to quiz selection menu from the top button</span>\n        </div>\n      }\n\n      return (\n        template(\n          <div>\n            <div style={{\n              \"marginBottom\": \"30px\", \"borderBottom\": \"1px solid var(--base-color)\"\n            }}>\n              <button className=\"borderStandard\" style={{ height: \"35px\" }} onClick={this.backButtonClickHandler.bind(this)}>Back To Quiz Selection</button>\n            </div>\n            {internalValueToDisplay}\n          </div >\n        )\n      )\n    } else if (this.state.current === 'scores') {\n      return (\n        template(\n          <table>\n            {this.state.scores.map((value) => {\n              return (\n                <tr>\n                  <th>\n                    {value.name}\n                  </th>\n                  <th>\n                    {value.t1}\n                  </th>\n                  <th>\n                    {value.t2}\n                  </th>\n                  <th>\n                    {value.t3}\n                  </th>\n                </tr>\n              )\n            })}\n          </table>\n        )\n      )\n    } else {\n      return (<div>\n        Womp Womp\n      </div>)\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}