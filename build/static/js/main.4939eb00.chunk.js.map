{"version":3,"sources":["logo_temp_1.png","template.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Template","props","onClickStatusChange","evt","fetch","baseAddress","credentials","then","res","json","data","setState","scores","callback","state","clicked","className","this","children","onClick","bind","React","Component","App","inputNameOnChangeHandler","preventDefault","inputNameValue","target","value","quizClickChangeHandler","quizToGo","name","Date","getTime","method","redirectTo","res2","data2","currentQuestion","questions","notice","maxCount","currentQuiz","current","answerButtonClickHandler","console","log","index","dataset","correct","seeScores","backButtonClickHandler","newTarget","quizOptions","reg","undefined","src","logo_temp","type","id","placeholder","onChange","login","map","key","internalValueToDisplay","question","answer","style","data-correct","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4939eb00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_temp_1.c22650c3.png\";","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass Template extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            scores: {},\r\n            clicked: false\r\n        }\r\n    }\r\n\r\n    onClickStatusChange = (evt) => {\r\n        fetch(`${this.props.baseAddress}/scores`, {\r\n            credentials: \"include\"\r\n        })\r\n            .then((res) => {\r\n                res.json()\r\n                    .then((data) => {\r\n                        this.setState({\r\n                            scores: data\r\n                        })\r\n                        this.props.callback()\r\n                    })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\" >\r\n                <header className=\"App-header\">\r\n                    <center>\r\n                        <div className=\"loginScreen borderStandard\" >\r\n                            {this.props.children}\r\n                        </div>\r\n                        <div className=\"borderStandard\">\r\n                            <button onClick={this.onClickStatusChange.bind(this)} className=\"borderStandard\" >See Scores</button>\r\n                        </div>\r\n                    </center>\r\n                </header>\r\n            </div >\r\n        )\r\n    }\r\n}\r\nexport default Template;","import React, { useEffect, useState } from 'react';\r\nimport logo_temp from './logo_temp_1.png'\r\nimport Template from './template'\r\nimport './App.css';\r\n\r\n/**\r\n * States : \r\n * login  -> quiz selection\r\n *        -> scores\r\n * quiz selection -> quiz\r\n * quiz\r\n * scores\r\n */\r\n\r\n// const Template = (props) => {\r\n//   const [scores, setScore] = useState({})\r\n//   const [clicked, setClick] = useState(false)\r\n\r\n//   useEffect(\r\n//     function fetchScores() {\r\n//       debugger;\r\n//       fetch(`${props.baseAddress}/scores`, {\r\n//         credentials: \"include\"\r\n//       })\r\n//         .then((res) => {\r\n//           res.json()\r\n//             .then((data) => {\r\n//               setScore(data)\r\n//               //props.callback()\r\n//             })\r\n//         })\r\n//     }\r\n//     , [clicked])\r\n\r\n\r\n//   return (\r\n//     <div className=\"App\" >\r\n//       <header className=\"App-header\">\r\n//         <center>\r\n//           <div className=\"loginScreen borderStandard\" >\r\n//             {props.children}\r\n//           </div>\r\n//           <div className=\"borderStandard\">\r\n//             <button onClick={setClick(!clicked)} className=\"borderStandard\" >See Scores</button>\r\n//           </div>\r\n//         </center>\r\n//       </header>\r\n//     </div >\r\n//   )\r\n// }\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.baseAddress = `http://127.0.0.1:3000` //`https://qui-zup.herokuapp.com`//\r\n\r\n    this.state = {\r\n      // current: \"login\",\r\n      quizOptions: null,\r\n      inputNameValue: null,\r\n      currentQuiz: null,\r\n      currentQuestion: null,\r\n      notice: null,\r\n      scores: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"component mounting\")\r\n    fetch(`${this.baseAddress}/isUserRegistered`, {\r\n      method: \"GET\",\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            debugger;\r\n            console.log(data)\r\n            if (data.reg) {\r\n              fetch(`${this.baseAddress}/listOfQuizzes`, {\r\n                credentials: \"include\"\r\n              })\r\n                .then((res2) => {\r\n                  res2.json()\r\n                    .then((data2) => {\r\n                      this.setState({\r\n                        current: \"quiz selection\",\r\n                        quizOptions: data2\r\n                      })\r\n                    })\r\n                })\r\n            } else {\r\n              this.setState({\r\n                current: \"login\"\r\n              })\r\n            }\r\n          })\r\n      })\r\n  }\r\n\r\n  login() {\r\n    if (this.state.inputNameValue !== null && this.state.inputNameValue !== undefined) {\r\n      debugger;\r\n      fetch(`${this.baseAddress}/registerUser/${this.state.inputNameValue}`, {\r\n        method: \"POST\",\r\n        credentials: \"include\"\r\n      })\r\n        .then((res) => {\r\n          debugger;\r\n          console.log(res)\r\n          fetch(`${this.baseAddress}/listOfQuizzes`, {\r\n            credentials: \"include\"\r\n          })\r\n            .then((res) => {\r\n              res.json()\r\n                .then((data) => {\r\n                  this.setState({\r\n                    current: \"quiz selection\",\r\n                    quizOptions: data\r\n                  })\r\n                })\r\n            })\r\n        })\r\n    }\r\n  }\r\n\r\n  inputNameOnChangeHandler = (evt) => {\r\n    evt.preventDefault();\r\n    this.setState({\r\n      inputNameValue: evt.target.value\r\n    })\r\n  }\r\n\r\n  quizClickChangeHandler = (evt) => {\r\n    evt.preventDefault();\r\n    let quizToGo = evt.target.name\r\n    fetch(`${this.baseAddress}/startTimer/${(new Date()).getTime()}/${quizToGo}/`, {\r\n      method: \"POST\",\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            fetch(`${this.baseAddress}/getQuestion/${quizToGo}/${data.redirectTo}`, {\r\n              credentials: \"include\"\r\n            })\r\n              .then((res2) => {\r\n                res2.json()\r\n                  .then((data2) => {\r\n                    this.setState({\r\n                      currentQuestion: data2.questions,\r\n                      notice: data2.notice,\r\n                      maxCount: data2.maxCount,\r\n                      currentQuiz: quizToGo,\r\n                      current: \"quiz\"\r\n                    })\r\n                  })\r\n              })\r\n\r\n          })\r\n      })\r\n  }\r\n\r\n  answerButtonClickHandler = (evt) => {\r\n    console.log(evt.target)\r\n    fetch(`${this.baseAddress}/getQuestion/${this.state.currentQuiz}/${this.state.currentQuestion.index}/${evt.target.dataset.correct}`, {\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            this.setState({\r\n              currentQuestion: data.questions,\r\n              notice: data.notice,\r\n              maxCount: data.maxCount,\r\n            })\r\n          })\r\n      })\r\n    if (this.state.currentQuestion.index === this.state.maxCount) {\r\n      fetch(`${this.baseAddress}/endTimer/${(new Date()).getTime()}/${this.state.currentQuiz}`, {\r\n        method: \"POST\",\r\n        credentials: \"include\"\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  seeScores = (evt) => {\r\n    debugger;\r\n    evt.preventDefault()\r\n    fetch(`${this.baseAddress}/scores`, {\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            this.setState({\r\n              current: \"scores\",\r\n              scores: data\r\n            })\r\n          })\r\n      })\r\n  }\r\n\r\n  backButtonClickHandler = (evt, newTarget) => {\r\n    evt.preventDefault()\r\n    this.setState({\r\n      current: \"quiz selection\"\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.current === 'login') {\r\n      return (\r\n        Template(\r\n          <div>\r\n            <img className=\"logoImg\" src={logo_temp} ></img>\r\n            <div className=\"userName\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"inputName\"\r\n                placeholder=\"Enter Your Name Here\"\r\n                className=\"borderStandard\"\r\n                onChange={this.inputNameOnChangeHandler}>\r\n              </input>\r\n            </div>\r\n            <div className=\"loginButtons\">\r\n              <button className=\"borderStandard\" onClick={this.login.bind(this)}>start quiz</button>\r\n              <button className=\"borderStandard\" onClick={this.seeScores.bind(this)}>see scores</button>\r\n            </div>\r\n          </div>\r\n        )\r\n      )\r\n    } else if (this.state.current === \"quiz selection\") {\r\n      return (\r\n        Template(\r\n          <div>\r\n            <span className=\"headerText\">Select a Quiz :</span>\r\n            <div className=\"loginButtons\">\r\n              {this.state.quizOptions.map((data) => {\r\n                return <button onClick={this.quizClickChangeHandler} name={data.key} className=\"borderStandard\" key={data.key}>{data.name}</button>\r\n              })}\r\n            </div>\r\n          </div >\r\n        )\r\n      )\r\n    } else if (this.state.current === 'quiz') {\r\n      let internalValueToDisplay = <div>\r\n        <span className=\"headerText\">{this.state.currentQuestion.question}</span>\r\n        <br></br>\r\n        <span className=\"notice\">{this.state.notice}</span>\r\n        <div className=\"loginButtons\">\r\n          {this.state.currentQuestion.answer.map((data, index) => {\r\n            return <button style={{ \"paddingBottom\": \"30px\", \"marginBottom\": \"30px\" }} onClick={this.answerButtonClickHandler.bind(this)} name={index} data-correct={index === this.state.currentQuestion.correct} className=\"borderStandard\" key={data}>{data}</button>\r\n          })}\r\n        </div>\r\n      </div >\r\n\r\n      if (this.state.currentQuestion.index > this.state.maxCount) {\r\n        debugger;\r\n        internalValueToDisplay = <div>\r\n          <span className=\"headerText\">Quiz Done! Go back to quiz selection menu from the top button</span>\r\n        </div>\r\n      }\r\n\r\n      return (\r\n        Template(\r\n          <div>\r\n            <div style={{\r\n              \"marginBottom\": \"30px\", \"borderBottom\": \"1px solid var(--base-color)\"\r\n            }}>\r\n              <button className=\"borderStandard\" style={{ height: \"35px\" }} onClick={this.backButtonClickHandler.bind(this)}>Back To Quiz Selection</button>\r\n            </div>\r\n            {internalValueToDisplay}\r\n          </div >\r\n        )\r\n      )\r\n    } else if (this.state.current === 'scores') {\r\n      return (\r\n        Template(\r\n\r\n        )\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"header\">\r\n          We're loading Stuff. Either than or something went seriously wrong.\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}