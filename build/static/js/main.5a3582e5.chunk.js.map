{"version":3,"sources":["logo_temp_1.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Template","props","className","children","style","color","onClick","document","getElementById","classList","remove","id","position","width","top","textAlign","height","add","scores","map","value","name","t1","score","t2","t3","App","inputNameOnChangeHandler","evt","preventDefault","setState","inputNameValue","target","quizClickChangeHandler","quizToGo","fetch","baseAddress","Date","getTime","method","credentials","then","res","json","data","redirectTo","res2","data2","currentQuestion","questions","notice","maxCount","currentQuiz","current","answerButtonClickHandler","state","index","dataset","correct","seeScores","backButtonClickHandler","newTarget","quizOptions","scoresVisibile","console","log","this","reg","undefined","scoresVisible","scoreFunction","bind","src","logo_temp","type","placeholder","onChange","login","key","internalValueToDisplay","question","answer","data-correct","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a3582e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_temp_1.c22650c3.png\";","import React, { useEffect, useState } from 'react';\r\nimport logo_temp from './logo_temp_1.png'\r\n//import Template from './template'\r\nimport './App.css';\r\n\r\n/**\r\n * States : \r\n * login  -> quiz selection\r\n *        -> scores\r\n * quiz selection -> quiz\r\n * quiz\r\n * scores\r\n */\r\n\r\nconst Template = (props) => {\r\n  return (\r\n    <div className=\"App\" >\r\n      <header className=\"App-header\">\r\n        <center>\r\n          <div className=\"loginScreen borderStandard\" >\r\n            {props.children}\r\n          </div>\r\n          <div className=\"borderStandard\" style={{ color: \"var(--base-color)\" }}>\r\n            <button onClick={() => {\r\n              document.getElementById('scoreMenu') &&\r\n                document.getElementById('scoreMenu').classList.remove(\"inVisible\")\r\n            }} className=\"borderStandard\" >See Scores</button>\r\n          </div>\r\n        </center>\r\n      </header>\r\n      <div id=\"scoreMenu\" style={{ position: \"fixed\", width: \"100%\", top: \"0%\", textAlign: \"center\" }}>\r\n        {/* <center> */}\r\n        <div style={{\r\n          \"marginBottom\": \"30px\", \"borderBottom\": \"1px solid var(--base-color)\"\r\n        }}>\r\n          <button\r\n            className=\"borderStandard\"\r\n            style={{ height: \"35px\" }}\r\n            onClick={() => {\r\n              document.getElementById('scoreMenu') &&\r\n                document.getElementById('scoreMenu').classList.add('inVisible')\r\n            }}> Close this </button>\r\n        </div>\r\n        <table style={{ width: \"400px\", height: \"500px\" }}>\r\n          <tr>\r\n            <th>\r\n              Name\r\n              </th>\r\n            <th>\r\n              T1 Score\r\n              </th>\r\n            <th>\r\n              T2 Score\r\n              </th>\r\n            <th>\r\n              T3 Score\r\n              </th>\r\n          </tr>\r\n          {props.scores && props.scores.map((value) => {\r\n            return (\r\n              <tr>\r\n                <td>{value.name}</td>\r\n                <td>{value.t1.score}</td>\r\n                <td>{value.t2.score}</td>\r\n                <td>{value.t3.score}</td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </table>\r\n        {/* </center> */}\r\n      </div >\r\n    </div >\r\n  )\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.baseAddress = `https://qui-zup.herokuapp.com`//`http://127.0.0.1:3000`\r\n\r\n    this.state = {\r\n      // current: \"login\",\r\n      quizOptions: null,\r\n      inputNameValue: null,\r\n      currentQuiz: null,\r\n      currentQuestion: null,\r\n      notice: null,\r\n      scores: null,\r\n      scoresVisibile: \"none\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"component mounting\")\r\n    fetch(`${this.baseAddress}/isUserRegistered`, {\r\n      method: \"GET\",\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            if (data.reg) {\r\n              fetch(`${this.baseAddress}/listOfQuizzes`, {\r\n                credentials: \"include\"\r\n              })\r\n                .then((res2) => {\r\n                  res2.json()\r\n                    .then((data2) => {\r\n                      this.setState({\r\n                        current: \"quiz selection\",\r\n                        quizOptions: data2\r\n                      })\r\n                    })\r\n                })\r\n            } else {\r\n              this.setState({\r\n                current: \"login\"\r\n              })\r\n            }\r\n          })\r\n      })\r\n  }\r\n\r\n  login() {\r\n    if (this.state.inputNameValue !== null && this.state.inputNameValue !== undefined) {\r\n      debugger;\r\n      fetch(`${this.baseAddress}/registerUser/${this.state.inputNameValue}`, {\r\n        method: \"POST\",\r\n        credentials: \"include\"\r\n      })\r\n        .then((res) => {\r\n          debugger;\r\n          fetch(`${this.baseAddress}/listOfQuizzes`, {\r\n            credentials: \"include\"\r\n          })\r\n            .then((res) => {\r\n              res.json()\r\n                .then((data) => {\r\n                  this.setState({\r\n                    current: \"quiz selection\",\r\n                    quizOptions: data\r\n                  })\r\n                })\r\n            })\r\n        })\r\n    }\r\n  }\r\n\r\n  inputNameOnChangeHandler = (evt) => {\r\n    evt.preventDefault();\r\n    this.setState({\r\n      inputNameValue: evt.target.value\r\n    })\r\n  }\r\n\r\n  quizClickChangeHandler = (evt) => {\r\n    evt.preventDefault();\r\n    let quizToGo = evt.target.name\r\n    fetch(`${this.baseAddress}/startTimer/${(new Date()).getTime()}/${quizToGo}/`, {\r\n      method: \"POST\",\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            fetch(`${this.baseAddress}/getQuestion/${quizToGo}/${data.redirectTo}`, {\r\n              credentials: \"include\"\r\n            })\r\n              .then((res2) => {\r\n                res2.json()\r\n                  .then((data2) => {\r\n                    this.setState({\r\n                      currentQuestion: data2.questions,\r\n                      notice: data2.notice,\r\n                      maxCount: data2.maxCount,\r\n                      currentQuiz: quizToGo,\r\n                      current: \"quiz\"\r\n                    })\r\n                  })\r\n              })\r\n\r\n          })\r\n      })\r\n  }\r\n\r\n  answerButtonClickHandler = (evt) => {\r\n    fetch(`${this.baseAddress}/getQuestion/${this.state.currentQuiz}/${this.state.currentQuestion.index}/${evt.target.dataset.correct}`, {\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            this.setState({\r\n              currentQuestion: data.questions,\r\n              notice: data.notice,\r\n              maxCount: data.maxCount,\r\n            })\r\n          })\r\n      })\r\n    if (this.state.currentQuestion.index === this.state.maxCount) {\r\n      fetch(`${this.baseAddress}/endTimer/${(new Date()).getTime()}/${this.state.currentQuiz}`, {\r\n        method: \"POST\",\r\n        credentials: \"include\"\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  seeScores = (evt) => {\r\n    debugger;\r\n    evt.preventDefault()\r\n    fetch(`${this.baseAddress}/scores`, {\r\n      credentials: \"include\"\r\n    })\r\n      .then((res) => {\r\n        res.json()\r\n          .then((data) => {\r\n            this.setState({\r\n              scores: data\r\n            })\r\n          })\r\n      })\r\n  }\r\n\r\n  backButtonClickHandler = (evt, newTarget) => {\r\n    evt.preventDefault()\r\n    this.setState({\r\n      current: \"quiz selection\"\r\n    })\r\n  }\r\n\r\n  reverseVisiblityScores() {\r\n    console.log(\"running reversal\");\r\n    if (this.state.scoresVisible === 'none') {\r\n      this.setState({ scoresVisible: \"\" })\r\n    } else {\r\n      this.setState({ scoresVisible: \"none\" })\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    if (this.state.current === 'login') {\r\n      return (\r\n        <Template scoreFunction={this.seeScores.bind(this)} scores={this.state.scores}>\r\n          <div>\r\n            <img className=\"logoImg\" src={logo_temp} ></img>\r\n            <div className=\"userName\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"inputName\"\r\n                placeholder=\"Enter Your Name Here\"\r\n                className=\"borderStandard\"\r\n                onChange={this.inputNameOnChangeHandler}>\r\n              </input>\r\n            </div>\r\n            <div className=\"loginButtons\">\r\n              <button className=\"borderStandard\" onClick={this.login.bind(this)}>start quiz</button>\r\n              <button className=\"borderStandard\" onClick={this.seeScores.bind(this)}>see scores</button>\r\n            </div>\r\n          </div>\r\n        </Template>\r\n      )\r\n    } else if (this.state.current === \"quiz selection\") {\r\n      return (\r\n        <Template scoreFunction={this.seeScores.bind(this)} scores={this.state.scores}>\r\n          <div>\r\n            <span className=\"headerText\">Select a Quiz :</span>\r\n            <div className=\"loginButtons\">\r\n              {this.state.quizOptions.map((data) => {\r\n                return <button onClick={this.quizClickChangeHandler} name={data.key} className=\"borderStandard\" key={data.key}>{data.name}</button>\r\n              })}\r\n            </div>\r\n          </div >\r\n        </Template>\r\n      )\r\n    } else if (this.state.current === 'quiz') {\r\n      let internalValueToDisplay = <div>\r\n        <span className=\"headerText\">{this.state.currentQuestion.question}</span>\r\n        <br></br>\r\n        <span className=\"notice\">{this.state.notice}</span>\r\n        <div className=\"loginButtons\">\r\n          {this.state.currentQuestion.answer.map((data, index) => {\r\n            return <button style={{ \"paddingBottom\": \"30px\", \"marginBottom\": \"30px\" }} onClick={this.answerButtonClickHandler.bind(this)} name={index} data-correct={index === this.state.currentQuestion.correct} className=\"borderStandard\" key={data}>{data}</button>\r\n          })}\r\n        </div>\r\n      </div >\r\n\r\n      if (this.state.currentQuestion.index > this.state.maxCount) {\r\n        debugger;\r\n        internalValueToDisplay = <div>\r\n          <span className=\"headerText\">Quiz Done! Go back to quiz selection menu from the top button</span>\r\n        </div>\r\n      }\r\n\r\n      return (\r\n        <Template scoreFunction={this.seeScores.bind(this)} scores={this.state.scores}>\r\n          <div>\r\n            <div style={{\r\n              \"marginBottom\": \"30px\", \"borderBottom\": \"1px solid var(--base-color)\"\r\n            }}>\r\n              <button className=\"borderStandard\" style={{ height: \"35px\" }} onClick={this.backButtonClickHandler.bind(this)}>Back To Quiz Selection</button>\r\n            </div>\r\n            {internalValueToDisplay}\r\n          </div >\r\n        </Template>\r\n      )\r\n    } else {\r\n      return (\r\n        <Template scoreFunction={this.seeScores.bind(this)} scores={this.state.scores} >\r\n          <div className=\"header\">\r\n            We're loading Stuff. Either than or something went seriously wrong.\r\n        </div>\r\n        </Template>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}